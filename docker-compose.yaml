version: '3.8'  # 指定docker-compose文件的版本

networks:
  mynetwork:
    driver: bridge

services:
  db:  # MySQL服务
    networks:
      - mynetwork
    image: "mysql:latest"  # 使用官方的MySQL镜像
    healthcheck:
      test: "mysqladmin ping -h localhost -u my -pyourpassword"
      interval: 5s
      timeout: 5s
      retries: 10
    command: 
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --explicit_defaults_for_timestamp=true
    volumes:
      - ./mysql/init_models.sql:/docker-entrypoint-initdb.d/init_models.sql  # 定义一个名为db_data的volume来持久化MySQL数据
    environment:
      - MYSQL_TCP_PORT=3308  #更改mysql容器内默认端口
      - MYSQL_ROOT_PASSWORD=yourpassword  # 设置root用户的密码
      - MYSQL_DATABASE=ginchat  # 创建并使用名为yourdb的数据库
    hostname: mysql-host
    ports:
      - "3308:3308"  # 将容器的3308端口映射到宿主机的3308端口（如果需要外部访问）

  redis:  # Redis服务
    networks:
      - mynetwork
    image: "redis:alpine"  # 使用官方的Redis镜像（alpine版本）
    ports:
      - "6379:6379"  # 将容器的6379端口映射到宿主机的6379端口
    depends_on:
      - db

  gochat:  # Golang服务的名称
    networks:
        - mynetwork
    build: .  # 构建上下文指向当前目录下的Dockerfile
    ports:
      - "8081:8081"  # 将容器的8080端口映射到宿主机的8080端口
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    
    environment:
      - REDIS_ADDR=redis:6379  # 环境变量，指定Redis地址
      - DB_HOST=db:3308        # 环境变量，指定数据库地址

  

  
    
# volumes:
#   db_data:  # 定义volume，名称与上面db服务中使用的一致